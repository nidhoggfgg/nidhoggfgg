<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>linux on nothing</title><link>https://blog.nidhoggfgg.fun/categories/linux/</link><description>Recent content in linux on nothing</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 18 May 2022 23:59:57 +0800</lastBuildDate><atom:link href="https://blog.nidhoggfgg.fun/categories/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>Firewalld快速上手</title><link>https://blog.nidhoggfgg.fun/post/da968c3a/</link><pubDate>Wed, 18 May 2022 23:59:57 +0800</pubDate><guid>https://blog.nidhoggfgg.fun/post/da968c3a/</guid><description>为什么要使用防火墙 不管是个人的电脑还是服务器，防火墙都是很重要的一个部分。 尤其是现在 ipv6 逐渐地是使用广泛，个人的电脑或许不能往内网一放，谁都不能直接从公网攻击到。
就我所在的位置而言，三大运营商的流量都是可以走 ipv6 的，甚至拨号的时候也是默认启用 ipv6 的，这意味着只需要路由器开启就万事具备了。 内网现在也不是安全的，个人开发用的 linux 也是很有必要上防火墙的，更别提服务器了。
linux 上防火墙主要是 iptables 和 firewalld。 他们底层的后端，我没用过，但很显然没必要了解，又不是开发防火墙。 iptables 我没用过，但越来越多的发行版推荐使用 firewalld，那么用 firewalld 就好了，而且 firewalld 使用起来非常简单。
再者，开启防火墙并没有什么坏处，为什么不用呢。
启用启动 启用(开机启动)的话，一般都会带有 unit 文件了，只需要:
sudo systemctl enable firewalld 启动:
sudo systemctl start firewalld 启动之后，firewalld 就已经在工作了！这意味着，除了 22 号端口的 tcp 链接(sshd 服务的端口，默认启用)以外的所有端口不被允许访问。 至此已经足够安全了，毕竟都禁止了。但如果要跑一个 ftp 服务器什么的那么就需要一番配置了。
firewalld 使用 firewalld 主要使用的指令就是 firewall-cmd。 firewall-cmd 必须以 root 权限运行，下文非必要时则省略了 sudo 或者 root 下运行。
区域(zone) firewalld 将网络划分为不同的区域(zone)，不同的区域对应不同的规则，这是为了快速修改防火墙配置。 比如在外面连着公共的网络，这很显然内网是不可信的，应该修改到某个非常严格的配置。 而回到家，连着家里的网络，那么这个就相对可信，可以切换到到不那么严格的配置，这个时候只用切换一下 zone 就好了。</description></item><item><title>Shell中的奇淫巧技</title><link>https://blog.nidhoggfgg.fun/post/8ca21edd/</link><pubDate>Sat, 07 May 2022 21:33:59 +0800</pubDate><guid>https://blog.nidhoggfgg.fun/post/8ca21edd/</guid><description>前言 本文所有内容均在 bash 下进行，在没有特殊说明的情况下 shell 都是指 bash。 一部分内容在 zsh 中会有差异 (存在差异时会指出) 其中尽可能是 shell 的功能，而非某一个软件包所实现的功能 本文的内容默认读者对 shell 已经有一定了解，诸如 $? 或者 ## 这些的含义本文不会赘述。 对于对 shell 不太了解的读者，只希望了解一点点实用技巧，可以阅读 实用技巧 \
奇淫巧技 记录了一些奇奇怪怪、较少使用，但很有趣指令、操作等。 较为实用的部分在 实用技巧 好玩的指令在 just-for-fun
$_ 与 : bash 圣经中的第一个代码示例如下:
trim_string() { # Usage: trim_string &amp;#34; example string &amp;#34; : &amp;#34;${1#&amp;#34;${1%%[![:space:]]*}&amp;#34;}&amp;#34; : &amp;#34;${_%&amp;#34;${_##*[![:space:]]}&amp;#34;}&amp;#34; printf &amp;#39;%s\n&amp;#39; &amp;#34;$_&amp;#34; } 对于字符串的操作比较基础，也有许多文档了，关注点在 : 和 $_ 上。 : 除了扩展后面的那一堆和重定向外，不会执行其他操作1，这里的重定向包括输出到 stdout，并且不会输出。 $_ 和其他脚本语言 (python 之类的) 类似，表示上一个指令执行的结果2 通过这些就可以写一些有趣的代码:
Ծ‸Ծ(){ sleep 0.</description></item></channel></rss>