<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>linux on nothing</title><link>https://blog.nidhoggfgg.fun/tags/linux/</link><description>Recent content in linux on nothing</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 07 May 2022 21:33:59 +0800</lastBuildDate><atom:link href="https://blog.nidhoggfgg.fun/tags/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>Shell中的奇淫巧技</title><link>https://blog.nidhoggfgg.fun/post/8ca21edd/</link><pubDate>Sat, 07 May 2022 21:33:59 +0800</pubDate><guid>https://blog.nidhoggfgg.fun/post/8ca21edd/</guid><description>前言 本文所有内容均在 bash 下进行，在没有特殊说明的情况下 shell 都是指 bash。 一部分内容在 zsh 中会有差异 (存在差异时会指出) 其中尽可能是 shell 的功能，而非某一个软件包所实现的功能 本文的内容默认读者对 shell 已经有一定了解，诸如 $? 或者 ## 这些的含义本文不会赘述。 对于对 shell 不太了解的读者，只希望了解一点点实用技巧，可以阅读 实用技巧 \
奇淫巧技 记录了一些奇奇怪怪、较少使用，但很有趣指令、操作等。 较为实用的部分在 实用技巧 好玩的指令在 just-for-fun
$_ 与 : bash 圣经中的第一个代码示例如下:
trim_string() { # Usage: trim_string &amp;#34; example string &amp;#34; : &amp;#34;${1#&amp;#34;${1%%[![:space:]]*}&amp;#34;}&amp;#34; : &amp;#34;${_%&amp;#34;${_##*[![:space:]]}&amp;#34;}&amp;#34; printf &amp;#39;%s\n&amp;#39; &amp;#34;$_&amp;#34; } 对于字符串的操作比较基础，也有许多文档了，关注点在 : 和 $_ 上。 : 除了扩展后面的那一堆和重定向外，不会执行其他操作1，这里的重定向包括输出到 stdout，并且不会输出。 $_ 和其他脚本语言 (python 之类的) 类似，表示上一个指令执行的结果2 通过这些就可以写一些有趣的代码:
Ծ‸Ծ(){ sleep 0.</description></item></channel></rss>